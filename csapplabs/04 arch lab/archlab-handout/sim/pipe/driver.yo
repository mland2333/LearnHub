                            | #######################################################################
                            | # Test for copying block of size K;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f2ffffffffffffffff | 	irmovq $K, %rdx		# src and dst have K elements
0x014: 30f65804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f74804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80dc02000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	#xorq %rax,%rax		# count = 0;
                            | 	#andq %rdx,%rdx		# len <= 0?
                            | 	#jle Done		# if so, goto Done:
                            |     #irmovq $8,%rcx
0x03b: 30f30100000000000000 |     irmovq $1,%rbx
0x045:                      | loop8:
0x045: c0f2f8ffffffffffffff |     iaddq $-8,%rdx
0x04f: 727d01000000000000   |     jl re4
0x058: 50870000000000000000 |     mrmovq (%rdi),%r8
0x062: 50970800000000000000 |     mrmovq 8(%rdi),%r9
0x06c: 50a71000000000000000 |     mrmovq 16(%rdi),%r10
0x076: 50b71800000000000000 |     mrmovq 24(%rdi),%r11
0x080: 50c72000000000000000 |     mrmovq 32(%rdi),%r12
0x08a: 50d72800000000000000 |     mrmovq 40(%rdi),%r13
0x094: 50e73000000000000000 |     mrmovq 48(%rdi),%r14
0x09e: 50573800000000000000 |     mrmovq 56(%rdi),%rbp
                            | 
0x0a8: 40860000000000000000 |     rmmovq %r8,(%rsi)
0x0b2: 40960800000000000000 |     rmmovq %r9,8(%rsi)
0x0bc: 40a61000000000000000 |     rmmovq %r10,16(%rsi)
0x0c6: 40b61800000000000000 |     rmmovq %r11,24(%rsi)
0x0d0: 40c62000000000000000 |     rmmovq %r12,32(%rsi)
0x0da: 40d62800000000000000 |     rmmovq %r13,40(%rsi)
0x0e4: 40e63000000000000000 |     rmmovq %r14,48(%rsi)
0x0ee: 40563800000000000000 |     rmmovq %rbp,56(%rsi)
0x0f8:                      | judge1:    
0x0f8: 6288                 |     andq %r8,%r8
0x0fa: 710501000000000000   |     jle judge2
0x103: 6030                 |     addq %rbx,%rax
0x105:                      | judge2:
0x105: 6299                 |     andq %r9,%r9
0x107: 711201000000000000   |     jle judge3
0x110: 6030                 |     addq %rbx,%rax
0x112:                      | judge3:
0x112: 62aa                 |     andq %r10,%r10
0x114: 711f01000000000000   |     jle judge4
0x11d: 6030                 |     addq %rbx,%rax
0x11f:                      | judge4:
0x11f: 62bb                 |     andq %r11,%r11
0x121: 712c01000000000000   |     jle judge5
0x12a: 6030                 |     addq %rbx,%rax
0x12c:                      | judge5:    
0x12c: 62cc                 |     andq %r12,%r12
0x12e: 713901000000000000   |     jle judge6
0x137: 6030                 |     addq %rbx,%rax
0x139:                      | judge6:
0x139: 62dd                 |     andq %r13,%r13
0x13b: 714601000000000000   |     jle judge7
0x144: 6030                 |     addq %rbx,%rax
0x146:                      | judge7:
0x146: 62ee                 |     andq %r14,%r14
0x148: 715301000000000000   |     jle judge8
0x151: 6030                 |     addq %rbx,%rax
0x153:                      | judge8:
0x153: 6255                 |     andq %rbp,%rbp
0x155: 716001000000000000   |     jle out1
0x15e: 6030                 |     addq %rbx,%rax
0x160:                      | out1:
0x160: c0f74000000000000000 |     iaddq $64,%rdi
0x16a: c0f64000000000000000 |     iaddq $64,%rsi
0x174: 704500000000000000   |     jmp loop8
                            |    
                            | 
0x17d:                      | re4:
                            |     #iaddq $7,%rdx
                            |     #je real1
0x17d: c0f20400000000000000 |     iaddq $4,%rdx
0x187: 723b02000000000000   |     jl re2
0x190: 50870000000000000000 |     mrmovq (%rdi),%r8
0x19a: 50970800000000000000 |     mrmovq 8(%rdi),%r9
0x1a4: 50a71000000000000000 |     mrmovq 16(%rdi),%r10
0x1ae: 50b71800000000000000 |     mrmovq 24(%rdi),%r11
0x1b8: 40860000000000000000 |     rmmovq %r8,(%rsi)
0x1c2: 40960800000000000000 |     rmmovq %r9,8(%rsi)
0x1cc: 40a61000000000000000 |     rmmovq %r10,16(%rsi)
0x1d6: 40b61800000000000000 |     rmmovq %r11,24(%rsi)
0x1e0:                      | judge9:    
0x1e0: 6288                 |     andq %r8,%r8
0x1e2: 72ed01000000000000   |     jl judge10
0x1eb: 6030                 |     addq %rbx,%rax
0x1ed:                      | judge10:
0x1ed: 6299                 |     andq %r9,%r9
0x1ef: 71fa01000000000000   |     jle judge11
0x1f8: 6030                 |     addq %rbx,%rax
0x1fa:                      | judge11:
0x1fa: 62aa                 |     andq %r10,%r10
0x1fc: 710702000000000000   |     jle judge12
0x205: 6030                 |     addq %rbx,%rax
0x207:                      | judge12:
0x207: 62bb                 |     andq %r11,%r11
0x209: 711402000000000000   |     jle out3
0x212: 6030                 |     addq %rbx,%rax
0x214:                      | out3:
                            |     #irmovq $32,%rcx
0x214: c0f62000000000000000 |     iaddq $32,%rsi
0x21e: c0f72000000000000000 |     iaddq $32,%rdi
                            |     #irmovq $2, %rcx
0x228: c0f2feffffffffffffff |     iaddq $-2,%rdx
0x232: 704502000000000000   |     jmp real2
0x23b:                      | re2:
                            |     #irmovq $2,%rcx
0x23b: c0f20200000000000000 |     iaddq $2,%rdx
0x245:                      | real2:
0x245: 72af02000000000000   |     jl re1
0x24e: 50870000000000000000 |     mrmovq (%rdi),%r8
0x258: 50970800000000000000 |     mrmovq 8(%rdi),%r9
0x262: c0f71000000000000000 |     iaddq $16,%rdi
0x26c: c0f61000000000000000 |     iaddq $16,%rsi
0x276: 6288                 |     andq %r8,%r8
0x278: 718302000000000000   |     jle then1
0x281: 6030                 |     addq %rbx,%rax
0x283:                      | then1:
0x283: 4086f0ffffffffffffff |     rmmovq %r8,-16(%rsi)
0x28d: 4096f8ffffffffffffff |     rmmovq %r9,-8(%rsi)
                            | 
0x297:                      | judge14:
0x297: 6299                 |     andq %r9,%r9
0x299: 71a402000000000000   |     jle out4
0x2a2: 6030                 |     addq %rbx,%rax
0x2a4:                      | out4:
                            |     #irmovq $16,%rcx
                            |     ###iaddq $16,%rsi
                            |     #iaddq $16,%rdi
0x2a4: 6132                 |     subq %rbx,%rdx
0x2a6: 70b102000000000000   |     jmp real1
                            | 
0x2af:                      | re1:
0x2af: 6032                 |     addq %rbx,%rdx
0x2b1:                      | real1:
0x2b1: 72db02000000000000   |     jl Done
0x2ba: 50870000000000000000 |     mrmovq (%rdi),%r8
0x2c4: 40860000000000000000 |     rmmovq %r8,(%rsi)
0x2ce: 6288                 |     andq %r8,%r8
0x2d0: 71db02000000000000   |     jle Done
0x2d9: 6030                 |     addq %rbx,%rax
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2db:                      | Done:
0x2db: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2dc:                      | End:
                            | #/* $end ncopy-ys */
0x2dc:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x2dc:                      | check:
                            | 	# Return value test
0x2dc: 30fa0000000000000000 | 	irmovq $0,%r10
0x2e6: 61a0                 | 	subq %r10,%rax
0x2e8: 730403000000000000   | 	je checkb
0x2f1: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x2fb: 704204000000000000   | 	jmp cdone
0x304:                      | checkb:
                            | 	# Code length check
0x304: 30f0dc02000000000000 | 	irmovq EndFun,%rax
0x30e: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x318: 6120                 | 	subq %rdx,%rax
0x31a: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x324: 6102                 | 	subq %rax,%rdx
0x326: 754203000000000000   | 	jge checkm
0x32f: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x339: 704204000000000000   | 	jmp cdone
0x342:                      | checkm:
0x342: 30f25804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x34c: 30f34804000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x356: 30f7ffffffffffffffff | 	irmovq $K,%rdi  # Count
0x360: 6277                 | 	andq %rdi,%rdi
0x362: 73c003000000000000   | 	je checkpre         # Skip check if count = 0
0x36b:                      | mcloop:
0x36b: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x375: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x37f: 6160                 | 	subq %rsi,%rax
0x381: 739d03000000000000   | 	je  mok
0x38a: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x394: 704204000000000000   | 	jmp cdone
0x39d:                      | mok:
0x39d: 30f00800000000000000 | 	irmovq $8,%rax
0x3a7: 6002                 | 	addq %rax,%rdx	  # dest ++
0x3a9: 6003                 | 	addq %rax,%rbx    # src++
0x3ab: 30f00100000000000000 | 	irmovq $1,%rax
0x3b5: 6107                 | 	subq %rax,%rdi    # cnt--
0x3b7: 766b03000000000000   | 	jg mcloop
0x3c0:                      | checkpre:
                            | 	# Check for corruption
0x3c0: 30f25004000000000000 | 	irmovq Predest,%rdx
0x3ca: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x3d4: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x3de: 6120                 | 	subq %rdx,%rax
0x3e0: 73fc03000000000000   | 	je checkpost
0x3e9: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x3f3: 704204000000000000   | 	jmp cdone
0x3fc:                      | checkpost:
                            | 	# Check for corruption
0x3fc: 30f25804000000000000 | 	irmovq Postdest,%rdx
0x406: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x410: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x41a: 6120                 | 	subq %rdx,%rax
0x41c: 733804000000000000   | 	je checkok
0x425: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x42f: 704204000000000000   | 	jmp cdone
0x438:                      | checkok:
                            | 	# Successful checks
0x438: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x442:                      | cdone:
0x442: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x448:                      | 	.align 8
0x448:                      | src:
0x448: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x450:                      | 	.align 16
0x450:                      | Predest:
0x450: fadebc0000000000     | 	.quad 0xbcdefa
0x458:                      | dest:
0x458:                      | Postdest:
0x458: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x460:                      | .align 8
                            | # Run time stack
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
                            | 
0x4e0:                      | Stack:
