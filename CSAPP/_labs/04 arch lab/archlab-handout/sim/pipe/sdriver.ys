#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	#xorq %rax,%rax		# count = 0;
	#andq %rdx,%rdx		# len <= 0?
	#jle Done		# if so, goto Done:
    #irmovq $8,%rcx
    irmovq $1,%rbx
loop8:
    iaddq $-8,%rdx
    jl re4
    mrmovq (%rdi),%r8
    mrmovq 8(%rdi),%r9
    mrmovq 16(%rdi),%r10
    mrmovq 24(%rdi),%r11
    mrmovq 32(%rdi),%r12
    mrmovq 40(%rdi),%r13
    mrmovq 48(%rdi),%r14
    mrmovq 56(%rdi),%rbp

    rmmovq %r8,(%rsi)
    rmmovq %r9,8(%rsi)
    rmmovq %r10,16(%rsi)
    rmmovq %r11,24(%rsi)
    rmmovq %r12,32(%rsi)
    rmmovq %r13,40(%rsi)
    rmmovq %r14,48(%rsi)
    rmmovq %rbp,56(%rsi)
judge1:    
    andq %r8,%r8
    jle judge2
    addq %rbx,%rax
judge2:
    andq %r9,%r9
    jle judge3
    addq %rbx,%rax
judge3:
    andq %r10,%r10
    jle judge4
    addq %rbx,%rax
judge4:
    andq %r11,%r11
    jle judge5
    addq %rbx,%rax
judge5:    
    andq %r12,%r12
    jle judge6
    addq %rbx,%rax
judge6:
    andq %r13,%r13
    jle judge7
    addq %rbx,%rax
judge7:
    andq %r14,%r14
    jle judge8
    addq %rbx,%rax
judge8:
    andq %rbp,%rbp
    jle out1
    addq %rbx,%rax
out1:
    iaddq $64,%rdi
    iaddq $64,%rsi
    jmp loop8
   

re4:
    #iaddq $7,%rdx
    #je real1
    iaddq $4,%rdx
    jl re2
    mrmovq (%rdi),%r8
    mrmovq 8(%rdi),%r9
    mrmovq 16(%rdi),%r10
    mrmovq 24(%rdi),%r11
    rmmovq %r8,(%rsi)
    rmmovq %r9,8(%rsi)
    rmmovq %r10,16(%rsi)
    rmmovq %r11,24(%rsi)
judge9:    
    andq %r8,%r8
    jl judge10
    addq %rbx,%rax
judge10:
    andq %r9,%r9
    jle judge11
    addq %rbx,%rax
judge11:
    andq %r10,%r10
    jle judge12
    addq %rbx,%rax
judge12:
    andq %r11,%r11
    jle out3
    addq %rbx,%rax
out3:
    #irmovq $32,%rcx
    iaddq $32,%rsi
    iaddq $32,%rdi
    #irmovq $2, %rcx
    iaddq $-2,%rdx
    jmp real2
re2:
    #irmovq $2,%rcx
    iaddq $2,%rdx
real2:
    jl re1
    mrmovq (%rdi),%r8
    mrmovq 8(%rdi),%r9
    iaddq $16,%rdi
    iaddq $16,%rsi
    andq %r8,%r8
    jle then1
    addq %rbx,%rax
then1:
    rmmovq %r8,-16(%rsi)
    rmmovq %r9,-8(%rsi)

judge14:
    andq %r9,%r9
    jle out4
    addq %rbx,%rax
out4:
    #irmovq $16,%rcx
    ###iaddq $16,%rsi
    #iaddq $16,%rdi
    subq %rbx,%rdx
    jmp real1

re1:
    addq %rbx,%rdx
real1:
    jl Done
    mrmovq (%rdi),%r8
    rmmovq %r8,(%rsi)
    andq %r8,%r8
    jle Done
    addq %rbx,%rax



##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
